{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\decdu\\\\OneDrive\\\\Bureau\\\\Biscotine\\\\biscottine\\\\src\\\\components\\\\IngredientInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './IngredientInput.css';\nimport mascotteBiscottine from '../assets/mascotte.png';\nimport logoInputIngredient from '../assets/logo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ingredientInput() {\n  _s();\n  // stock la recherche \n  const [saisie, setSaisie] = useState(\"\");\n  // Pourquoi const car tu modifie l'état lui meme et non saisie\n  // ici on utilise la valeur d'etat saisie et setSaisie qui permet de mettre a jour l'etat de saisie\n\n  // garder les ingredient \n  const [ingredientGarder, setIngredientGarder] = useState([]);\n  // Le tableau vide permet que quand l'utilisateur press le button sa rentre dans le tableau vide\n\n  // ingredient eviter\n  const [ingredientEviter, setIngredientEviter] = useState([]);\n\n  // Ici on recupere la saisie de l'utilisateur et met a jour saisie\n  const handleSearchChange = event => {\n    setSasie(event.target.value);\n  };\n  // event convention pour dire Evenement parfois racourci par e \n\n  // permet de suprimer des ingredient de \"eviter \" \n  const suprimerDeEviter = ingredient => {\n    setIngredientEviter(prev => prev.filter(item => item.name !== ingredient.name));\n  };\n  // Pourquoi prev ? une convention pour dire précédent sa represente l'etat avant le changement \n\n  //   permet de suprimer les ingredient de \"garder\"  \n  const suprimerDeGarder = ingredient => {\n    setIngredientGarder(prev => prev.filter(item => item.name !== ingredient.name));\n  };\n\n  // c'est un if else pour donner le choix si lélément est a éviter ou garder \n  const handleIngredientChoice = (ingredient, choix) => {\n    if (choix === \"garder\") {\n      setIngredientGarder(prev => [...prev, ingredient]);\n      // les \"...\" la décomposition Pour dire \"le reste\" \n      setIngredientEviter(prev => prev.filter(item => item.name !== ingredient.name));\n    } else if (choix === \"Eviter\") {\n      setIngredientEviter(prev => [...prev, ingredient]);\n      setIngredientGarder(prev => prev.filter(item => item.name !== ingredient.name));\n    }\n  };\n  const toutIngredients = data.flatMap(post => post.ingredients);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"encadrementIngredientInput\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"biscottineMascotteInput\",\n      src: mascotteBiscottine,\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"titreLogoInput\",\n      src: logoInputIngredient,\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"texteSousLogoInput\",\n      children: [\"Trouve-moi \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 58\n      }, this), \" une recette !\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"ingredientInput\",\n      type: \"text\",\n      placeHolder: \" Yes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n_s(ingredientInput, \"nBCni9XDN+dQxLr26WiAlIGCY1g=\");\n;\nexport default ingredientInput;","map":{"version":3,"names":["React","useState","mascotteBiscottine","logoInputIngredient","jsxDEV","_jsxDEV","ingredientInput","_s","saisie","setSaisie","ingredientGarder","setIngredientGarder","ingredientEviter","setIngredientEviter","handleSearchChange","event","setSasie","target","value","suprimerDeEviter","ingredient","prev","filter","item","name","suprimerDeGarder","handleIngredientChoice","choix","toutIngredients","data","flatMap","post","ingredients","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","type","placeHolder"],"sources":["C:/Users/decdu/OneDrive/Bureau/Biscotine/biscottine/src/components/IngredientInput.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport './IngredientInput.css';\r\nimport mascotteBiscottine from '../assets/mascotte.png'\r\nimport logoInputIngredient from '../assets/logo.png'\r\n\r\n\r\n\r\n\r\nfunction ingredientInput() {\r\n    // stock la recherche \r\n    const [saisie, setSaisie] = useState(\"\");\r\n    // Pourquoi const car tu modifie l'état lui meme et non saisie\r\n    // ici on utilise la valeur d'etat saisie et setSaisie qui permet de mettre a jour l'etat de saisie\r\n\r\n    // garder les ingredient \r\n    const [ingredientGarder, setIngredientGarder] = useState([]);\r\n    // Le tableau vide permet que quand l'utilisateur press le button sa rentre dans le tableau vide\r\n\r\n    // ingredient eviter\r\n    const [ingredientEviter, setIngredientEviter] = useState([]);\r\n\r\n    // Ici on recupere la saisie de l'utilisateur et met a jour saisie\r\n    const handleSearchChange = (event) => {\r\n        setSasie(event.target.value);\r\n    };\r\n    // event convention pour dire Evenement parfois racourci par e \r\n\r\n    // permet de suprimer des ingredient de \"eviter \" \r\n    const suprimerDeEviter = (ingredient) => {\r\n        setIngredientEviter((prev) => prev.filter(item => item.name !== ingredient.name));\r\n    };\r\n    // Pourquoi prev ? une convention pour dire précédent sa represente l'etat avant le changement \r\n\r\n    //   permet de suprimer les ingredient de \"garder\"  \r\n    const suprimerDeGarder = (ingredient) => {\r\n        setIngredientGarder((prev) => prev.filter(item => item.name !== ingredient.name));\r\n    };\r\n\r\n    // c'est un if else pour donner le choix si lélément est a éviter ou garder \r\n    const handleIngredientChoice = (ingredient, choix) => {\r\n        if (choix === \"garder\") {\r\n            setIngredientGarder((prev) => [...prev, ingredient]);\r\n            // les \"...\" la décomposition Pour dire \"le reste\" \r\n            setIngredientEviter((prev) => prev.filter(item => item.name !== ingredient.name)); \r\n        } else if (choix === \"Eviter\") {\r\n            setIngredientEviter((prev) => [...prev, ingredient]);\r\n          setIngredientGarder((prev) => prev.filter(item => item.name !== ingredient.name)); \r\n        }\r\n      };\r\n\r\n      const toutIngredients = data.flatMap(post => post.ingredients)\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"encadrementIngredientInput\">\r\n\r\n\r\n            {/* Image de la mascotte  */}\r\n            <img className='biscottineMascotteInput' src={mascotteBiscottine} alt='' />\r\n            {/* Image du logo  */}\r\n            <img className='titreLogoInput' src={logoInputIngredient} alt='' />\r\n            {/* Texte entredessous du Logo  */}\r\n            <p className='texteSousLogoInput'>Trouve-moi <br /> une recette !</p>\r\n\r\n            <p></p>\r\n            <p></p>\r\n            <input className=\"ingredientInput\" type=\"text\" placeHolder=\" Yes\" />\r\n\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\n\r\nexport default ingredientInput;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}