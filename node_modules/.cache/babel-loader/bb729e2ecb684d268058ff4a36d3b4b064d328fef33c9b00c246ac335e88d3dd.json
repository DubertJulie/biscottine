{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\decdu\\\\OneDrive\\\\Bureau\\\\Biscotine\\\\biscottine\\\\src\\\\components\\\\IngredientInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport data from './data/recipes.json'; // Importation des données (recettes)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RecipeSearch() {\n  _s();\n  const [query, setQuery] = useState(\"\"); // État pour gérer la recherche\n  const [sortCriteria, setSortCriteria] = useState(\"title\"); // Critère de tri (par défaut : titre)\n\n  // Fonction qui gère la modification du champ de recherche\n  const handleSearchChange = event => {\n    setQuery(event.target.value);\n  };\n\n  // Fonction pour gérer le changement de critère de tri\n  const handleSortChange = event => {\n    setSortCriteria(event.target.value); // Met à jour le critère de tri\n  };\n\n  // Fonction de tri des recettes\n  const sortRecipes = recipes => {\n    if (sortCriteria === \"title\") {\n      // Trier par le titre des recettes (alphabetiquement)\n      return recipes.sort((a, b) => a.title.toLowerCase().localeCompare(b.title.toLowerCase()));\n    } else if (sortCriteria === \"ingredients\") {\n      // Trier par les ingrédients (par le nom de l'ingrédient)\n      return recipes.sort((a, b) => {\n        var _a$ingredients$, _b$ingredients$;\n        const ingredientA = ((_a$ingredients$ = a.ingredients[0]) === null || _a$ingredients$ === void 0 ? void 0 : _a$ingredients$.name.toLowerCase()) || \"\"; // Premier ingrédient de la recette\n        const ingredientB = ((_b$ingredients$ = b.ingredients[0]) === null || _b$ingredients$ === void 0 ? void 0 : _b$ingredients$.name.toLowerCase()) || \"\"; // Premier ingrédient de la recette\n        return ingredientA.localeCompare(ingredientB); // Comparaison des noms des ingrédients\n      });\n    }\n    return recipes; // Par défaut, ne pas trier\n  };\n\n  // Filtrer les recettes en fonction de la recherche\n  const filteredRecipes = data.filter(post => query === '' || post.title && post.title.toLowerCase().includes(query.toLowerCase()));\n\n  // Appliquer le tri aux recettes filtrées\n  const sortedRecipes = sortRecipes(filteredRecipes);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: query,\n      onChange: handleSearchChange,\n      placeholder: \"Rechercher une recette...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Trier par :\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: sortCriteria,\n          onChange: handleSortChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"title\",\n            children: \"Titre\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"ingredients\",\n            children: \"Ingr\\xE9dient (par nom)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: sortedRecipes.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recipe\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: post.ingredients.map((ingredient, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [ingredient.name, \" - \", ingredient.quantity, \" \", ingredient.unit]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(RecipeSearch, \"xLY50rMBjHDphSnVM0TZ+KJwsYk=\");\n_c = RecipeSearch;\nexport default RecipeSearch;\nvar _c;\n$RefreshReg$(_c, \"RecipeSearch\");","map":{"version":3,"names":["React","useState","data","jsxDEV","_jsxDEV","RecipeSearch","_s","query","setQuery","sortCriteria","setSortCriteria","handleSearchChange","event","target","value","handleSortChange","sortRecipes","recipes","sort","a","b","title","toLowerCase","localeCompare","_a$ingredients$","_b$ingredients$","ingredientA","ingredients","name","ingredientB","filteredRecipes","filter","post","includes","sortedRecipes","children","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","map","index","className","ingredient","idx","quantity","unit","_c","$RefreshReg$"],"sources":["C:/Users/decdu/OneDrive/Bureau/Biscotine/biscottine/src/components/IngredientInput.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport data from './data/recipes.json';  // Importation des données (recettes)\r\n\r\nfunction RecipeSearch() {\r\n  const [query, setQuery] = useState(\"\");  // État pour gérer la recherche\r\n  const [sortCriteria, setSortCriteria] = useState(\"title\");  // Critère de tri (par défaut : titre)\r\n\r\n  // Fonction qui gère la modification du champ de recherche\r\n  const handleSearchChange = (event) => {\r\n    setQuery(event.target.value);\r\n  };\r\n\r\n  // Fonction pour gérer le changement de critère de tri\r\n  const handleSortChange = (event) => {\r\n    setSortCriteria(event.target.value);  // Met à jour le critère de tri\r\n  };\r\n\r\n  // Fonction de tri des recettes\r\n  const sortRecipes = (recipes) => {\r\n    if (sortCriteria === \"title\") {\r\n      // Trier par le titre des recettes (alphabetiquement)\r\n      return recipes.sort((a, b) => a.title.toLowerCase().localeCompare(b.title.toLowerCase()));\r\n    } else if (sortCriteria === \"ingredients\") {\r\n      // Trier par les ingrédients (par le nom de l'ingrédient)\r\n      return recipes.sort((a, b) => {\r\n        const ingredientA = a.ingredients[0]?.name.toLowerCase() || \"\";  // Premier ingrédient de la recette\r\n        const ingredientB = b.ingredients[0]?.name.toLowerCase() || \"\";  // Premier ingrédient de la recette\r\n        return ingredientA.localeCompare(ingredientB);  // Comparaison des noms des ingrédients\r\n      });\r\n    }\r\n    return recipes;  // Par défaut, ne pas trier\r\n  };\r\n\r\n  // Filtrer les recettes en fonction de la recherche\r\n  const filteredRecipes = data.filter(post => \r\n    query === '' || (post.title && post.title.toLowerCase().includes(query.toLowerCase()))\r\n  );\r\n\r\n  // Appliquer le tri aux recettes filtrées\r\n  const sortedRecipes = sortRecipes(filteredRecipes);\r\n\r\n  return (\r\n    <div>\r\n      {/* Champ de recherche */}\r\n      <input \r\n        type=\"text\" \r\n        value={query} \r\n        onChange={handleSearchChange} \r\n        placeholder=\"Rechercher une recette...\" \r\n      />\r\n\r\n      {/* Choix du critère de tri */}\r\n      <div>\r\n        <label>\r\n          Trier par : \r\n          <select value={sortCriteria} onChange={handleSortChange}>\r\n            <option value=\"title\">Titre</option>\r\n            <option value=\"ingredients\">Ingrédient (par nom)</option>\r\n          </select>\r\n        </label>\r\n      </div>\r\n\r\n      {/* Affichage des recettes triées */}\r\n      <div>\r\n        {sortedRecipes.map((post, index) => (\r\n          <div key={index} className=\"recipe\">\r\n            <h3>{post.title}</h3> {/* Affichage du titre de la recette */}\r\n            \r\n            {/* Affichage des ingrédients */}\r\n            <ul>\r\n              {post.ingredients.map((ingredient, idx) => (\r\n                <li key={idx}>\r\n                  {ingredient.name} - {ingredient.quantity} {ingredient.unit}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RecipeSearch;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}